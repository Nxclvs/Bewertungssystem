name: Automatische Bewertung des Jupyter Notebooks

on:
  push:
    branches:
      - main 

jobs:
  check_cell:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v3

      - name: Lösche die result.txt, wenn sie existiert
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if [ -f result.txt ]; then
            git rm result.txt
            git commit -m "Löschen der Datei result.txt"
          else
            echo "result.txt existiert nicht und wurde daher nicht gelöscht"
          fi

      - name: Installiere Abhängigkeiten
        run: pip install nbformat

      - name: Suche nach Markierung im Jupyter Notebook
        run: python check_notebook_marker_alt.py

      - name: Veränderung des Zeitstempels von result.txt
        run: touch result.txt

      - name: Pushe die result.txt ins Repository
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add result.txt
          git commit -m "Überprüfung, ob gesuchte Zelle vorhanden ist, erfolgreich." --allow-empty --no-verify
          git pull --rebase origin main || (git rebase --abort && echo "Rebase fehlgeschlagen, führe Merge durch")
          git pull --no-rebase
          git push
          
      - name: Speichere result.txt als Artifact
        uses: actions/upload-artifact@v4
        with:
          name: result-file
          path: result.txt

  bewerten_notebook:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: check_cell

    steps:
      - name: Lade result.txt herunter
        uses: actions/download-artifact@v4
        with:
          name: result-file

      - name: Repository auschecken
        uses: actions/checkout@v3

      - name: Lösche die Bewertung.txt, wenn sie existiert
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if [ -f Bewertung.txt ]; then
            git rm Bewertung.txt
            git commit -m "Löschen der Datei Bewertung.txt"
          else
            echo "Bewertung.txt existiert nicht und wurde daher nicht gelöscht"
          fi

      - name: Installiere Abhängigkeiten
        run: pip install nbformat

      - name: Führe Code aus und bewerte das Ergebnis
        run: python check_solution_alt.py

      - name: Veränderung des Zeitstempels von Bewertung.txt
        run: touch Bewertung.txt

      - name: Pushe die Bewertung.txt ins Repository
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add Bewertung.txt
          git commit -m "Ausführen und Bewerten der Lösung erfolgreich ausgeführt." --allow-empty --no-verify
          git pull --rebase origin main || (git rebase --abort && echo "Rebase fehlgeschlagen, führe Merge durch")
          git pull --no-rebase
          git push
